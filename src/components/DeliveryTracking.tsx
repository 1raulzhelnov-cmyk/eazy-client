import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import Map from './Map';
import { MapPin, Clock, Phone, MessageCircle } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface DeliveryTrackingProps {
  orderId: string;
  deliveryAddress: string;
  estimatedTime: string;
}

interface SafeDriverInfo {
  driver_id: string;
  first_name: string;
  last_name_initial: string;
  rating: number;
  vehicle_type: string;
  status: string;
}

const DeliveryTracking: React.FC<DeliveryTrackingProps> = ({
  orderId,
  deliveryAddress,
  estimatedTime
}) => {
  const [courierLocation, setCourierLocation] = useState({
    lat: 55.7528,
    lng: 37.6200
  });
  const [driverInfo, setDriverInfo] = useState<SafeDriverInfo | null>(null);
  const [loading, setLoading] = useState(true);

  // Fetch safe driver info
  useEffect(() => {
    const fetchDriverInfo = async () => {
      try {
        const { data, error } = await supabase.rpc('get_safe_driver_info_for_order', {
          order_id_param: orderId
        });

        if (error) {
          console.error('Error fetching driver info:', error);
          return;
        }

        setDriverInfo(data && data.length > 0 ? data[0] : null);
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    };

    if (orderId) {
      fetchDriverInfo();
    }
  }, [orderId]);

  const deliveryLocation = {
    lat: 55.7558,
    lng: 37.6173,
    address: deliveryAddress
  };

  // Simulate courier movement
  useEffect(() => {
    const interval = setInterval(() => {
      setCourierLocation(prev => ({
        lat: prev.lat + (Math.random() - 0.5) * 0.001,
        lng: prev.lng + (Math.random() - 0.5) * 0.001
      }));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const trackingSteps = [
    {
      id: 1,
      title: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç',
      description: '–†–µ—Å—Ç–æ—Ä–∞–Ω –≥–æ—Ç–æ–≤–∏—Ç –≤–∞—à –∑–∞–∫–∞–∑',
      completed: true,
      time: '18:30'
    },
    {
      id: 2,
      title: '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      description: '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
      completed: true,
      time: '18:45'
    },
    {
      id: 3,
      title: '–ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ',
      description: '–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑',
      completed: true,
      time: '19:00'
    },
    {
      id: 4,
      title: '–í –ø—É—Ç–∏',
      description: '–ö—É—Ä—å–µ—Ä –µ–¥–µ—Ç –∫ –≤–∞–º',
      completed: true,
      time: '–°–µ–π—á–∞—Å'
    },
    {
      id: 5,
      title: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      description: '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
      completed: false,
      time: estimatedTime
    }
  ];

  return (
    <div className="space-y-6">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—å–µ—Ä–µ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MapPin className="w-5 h-5" />
            –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏
          </CardTitle>
          <CardDescription>
            –í–∞—à –∑–∞–∫–∞–∑ #{orderId} –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                <span className="text-lg">üöó</span>
              </div>
              <div>
                <h4 className="font-semibold">
                  {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : driverInfo ? `${driverInfo.first_name} ${driverInfo.last_name_initial}` : '–ö—É—Ä—å–µ—Ä'}
                </h4>
                <p className="text-sm text-muted-foreground">
                  {driverInfo ? `${driverInfo.vehicle_type} ‚Ä¢ ‚≠ê ${driverInfo.rating}` : '–ö—É—Ä—å–µ—Ä'}
                </p>
              </div>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm">
                <Phone className="w-4 h-4 mr-1" />
                –ü–æ–∑–≤–æ–Ω–∏—Ç—å
              </Button>
              <Button variant="outline" size="sm">
                <MessageCircle className="w-4 h-4 mr-1" />
                –ù–∞–ø–∏—Å–∞—Ç—å
              </Button>
            </div>
          </div>
          
          <div className="flex items-center gap-2 text-sm">
            <Clock className="w-4 h-4" />
            <span>–ü—Ä–∏–±—ã—Ç–∏–µ: {estimatedTime}</span>
            <Badge variant="secondary">–í –ø—É—Ç–∏</Badge>
          </div>
        </CardContent>
      </Card>

      {/* –ö–∞—Ä—Ç–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º */}
      <Card>
        <CardHeader>
          <CardTitle>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ</CardTitle>
          <CardDescription>
            –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Map 
            restaurants={[{
              id: 'courier',
              name: driverInfo ? `–ö—É—Ä—å–µ—Ä ${driverInfo.first_name} ${driverInfo.last_name_initial}` : '–ö—É—Ä—å–µ—Ä',
              address: '–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
              lat: courierLocation.lat,
              lng: courierLocation.lng
            }]}
            deliveryLocation={deliveryLocation}
            height="300px"
          />
        </CardContent>
      </Card>

      {/* –≠—Ç–∞–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏ */}
      <Card>
        <CardHeader>
          <CardTitle>–≠—Ç–∞–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {trackingSteps.map((step, index) => (
              <div key={step.id} className="flex items-start gap-4">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                  step.completed 
                    ? 'bg-primary text-primary-foreground' 
                    : 'bg-muted text-muted-foreground'
                }`}>
                  {step.completed ? '‚úì' : step.id}
                </div>
                <div className="flex-1 pb-4">
                  <div className="flex items-center justify-between">
                    <h4 className={`font-medium ${step.completed ? 'text-foreground' : 'text-muted-foreground'}`}>
                      {step.title}
                    </h4>
                    <span className="text-sm text-muted-foreground">{step.time}</span>
                  </div>
                  <p className="text-sm text-muted-foreground mt-1">{step.description}</p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default DeliveryTracking;