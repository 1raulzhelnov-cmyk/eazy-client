import { useState, useEffect, useRef } from 'react';
import { Search, Mic, MicOff, Sparkles, Clock, TrendingUp } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/components/ui/use-toast';

interface SmartSearchProps {
  onSearch: (query: string, suggestions?: SearchSuggestion[]) => void;
  placeholder?: string;
}

interface SearchSuggestion {
  id: string;
  text: string;
  type: 'cuisine' | 'dish' | 'restaurant' | 'trending';
  icon?: string;
  confidence?: number;
}

// –¢–∏–ø—ã –¥–ª—è Web Speech API
declare global {
  interface Window {
    SpeechRecognition: any;
    webkitSpeechRecognition: any;
  }
}

interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  onresult: (event: any) => void;
  onerror: () => void;
  onend: () => void;
  start: () => void;
  stop: () => void;
}

export const SmartSearch = ({ onSearch, placeholder = "–ß—Ç–æ –±—É–¥–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å?" }: SmartSearchProps) => {
  const [query, setQuery] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [trendingQueries] = useState<SearchSuggestion[]>([
    { id: '1', text: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', type: 'dish', icon: 'üçï' },
    { id: '2', text: '–°—É—à–∏ —Å–µ—Ç', type: 'dish', icon: 'üç£' },
    { id: '3', text: '–ë—É—Ä–≥–µ—Ä —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π', type: 'dish', icon: 'üçî' },
    { id: '4', text: '–ê–∑–∏–∞—Ç—Å–∫–∞—è –∫—É—Ö–Ω—è', type: 'cuisine', icon: 'ü•¢' },
    { id: '5', text: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', type: 'trending', icon: '‚ö°' }
  ]);
  
  const recognition = useRef<SpeechRecognition | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web Speech API
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition.current = new SpeechRecognition();
      recognition.current.continuous = false;
      recognition.current.interimResults = false;
      recognition.current.lang = 'ru-RU';

      recognition.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setQuery(transcript);
        handleSearch(transcript);
        setIsListening(false);
      };

      recognition.current.onerror = () => {
        setIsListening(false);
        toast({
          title: "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
          description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
          variant: "destructive"
        });
      };

      recognition.current.onend = () => {
        setIsListening(false);
      };
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏ –∏–∑ localStorage
    const saved = localStorage.getItem('recentSearches');
    if (saved) {
      setRecentSearches(JSON.parse(saved));
    }
  }, []);

  // AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    if (query.length > 1) {
      generateAISuggestions(query);
    } else {
      setSuggestions([]);
    }
  }, [query]);

  const generateAISuggestions = async (searchQuery: string) => {
    // –ò–º–∏—Ç–∞—Ü–∏—è AI-–ø–æ–¥—Å–∫–∞–∑–æ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API)
    const mockSuggestions: SearchSuggestion[] = [];
    
    const lowerQuery = searchQuery.toLowerCase();
    
    // –ü–æ–∏—Å–∫ –ø–æ –±–ª—é–¥–∞–º
    const dishes = [
      { name: '–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏', cuisine: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è', icon: 'üçï' },
      { name: '–°—É—à–∏ –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', cuisine: '–Ø–ø–æ–Ω—Å–∫–∞—è', icon: 'üç£' },
      { name: '–ë–æ—Ä—â —Å —Å–º–µ—Ç–∞–Ω–æ–π', cuisine: '–†—É—Å—Å–∫–∞—è', icon: 'üç≤' },
      { name: '–ü–∞–¥ –¢–∞–π', cuisine: '–¢–∞–π—Å–∫–∞—è', icon: 'üçú' },
      { name: '–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π', cuisine: '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è', icon: 'ü•ó' }
    ];

    dishes.forEach((dish, index) => {
      if (dish.name.toLowerCase().includes(lowerQuery) || lowerQuery.includes(dish.name.toLowerCase().split(' ')[0])) {
        mockSuggestions.push({
          id: `dish-${index}`,
          text: dish.name,
          type: 'dish',
          icon: dish.icon,
          confidence: 0.9
        });
      }
    });

    // –ü–æ–∏—Å–∫ –ø–æ –∫—É—Ö–Ω—è–º
    const cuisines = ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è', '–Ø–ø–æ–Ω—Å–∫–∞—è', '–ö–∏—Ç–∞–π—Å–∫–∞—è', '–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è', '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è'];
    cuisines.forEach((cuisine, index) => {
      if (cuisine.toLowerCase().includes(lowerQuery)) {
        mockSuggestions.push({
          id: `cuisine-${index}`,
          text: `${cuisine} –∫—É—Ö–Ω—è`,
          type: 'cuisine',
          icon: 'üçΩÔ∏è',
          confidence: 0.8
        });
      }
    });

    // –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    const hour = new Date().getHours();
    if ((lowerQuery.includes('–∑–∞–≤—Ç—Ä–∞–∫') || lowerQuery.includes('—É—Ç—Ä–æ')) && hour < 12) {
      mockSuggestions.unshift({
        id: 'breakfast',
        text: '–ó–∞–≤—Ç—Ä–∞–∫–∏ –∏ –∫–æ—Ñ–µ',
        type: 'trending',
        icon: '‚òï',
        confidence: 0.95
      });
    }
    
    if ((lowerQuery.includes('–æ–±–µ–¥') || lowerQuery.includes('–¥–µ–Ω—å')) && hour >= 12 && hour < 17) {
      mockSuggestions.unshift({
        id: 'lunch',
        text: '–û–±–µ–¥–µ–Ω–Ω—ã–µ —Å–µ—Ç—ã',
        type: 'trending',
        icon: 'üçΩÔ∏è',
        confidence: 0.95
      });
    }

    setSuggestions(mockSuggestions.slice(0, 8));
  };

  const startVoiceSearch = () => {
    if (recognition.current && !isListening) {
      setIsListening(true);
      recognition.current.start();
      toast({
        title: "–°–ª—É—à–∞—é...",
        description: "–°–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏"
      });
    }
  };

  const stopVoiceSearch = () => {
    if (recognition.current && isListening) {
      recognition.current.stop();
      setIsListening(false);
    }
  };

  const handleSearch = (searchQuery: string = query) => {
    if (searchQuery.trim()) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏
      const newRecentSearches = [
        searchQuery,
        ...recentSearches.filter(s => s !== searchQuery)
      ].slice(0, 5);
      
      setRecentSearches(newRecentSearches);
      localStorage.setItem('recentSearches', JSON.stringify(newRecentSearches));
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      onSearch(searchQuery, suggestions);
      setSuggestions([]);
    }
  };

  const selectSuggestion = (suggestion: SearchSuggestion) => {
    setQuery(suggestion.text);
    handleSearch(suggestion.text);
    inputRef.current?.focus();
  };

  const hasRecentOrTrending = recentSearches.length > 0 || trendingQueries.length > 0;
  const showSuggestions = query.length > 0 ? suggestions.length > 0 : hasRecentOrTrending;

  return (
    <div className="relative w-full max-w-2xl">
      {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
        <Input
          ref={inputRef}
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
          placeholder={placeholder}
          className="pl-10 pr-12 h-12 text-lg bg-background/80 backdrop-blur-sm border-2 focus:border-primary"
        />
        
        {/* –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ */}
        {recognition.current && (
          <Button
            variant="ghost"
            size="sm"
            className={`absolute right-1 top-1/2 transform -translate-y-1/2 h-10 w-10 p-0 ${
              isListening ? 'text-destructive animate-pulse' : 'text-muted-foreground'
            }`}
            onClick={isListening ? stopVoiceSearch : startVoiceSearch}
          >
            {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
          </Button>
        )}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {showSuggestions && (
        <Card className="absolute top-full left-0 right-0 mt-2 p-4 shadow-lg z-50 max-h-96 overflow-y-auto">
          {/* AI –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
          {suggestions.length > 0 && (
            <div className="mb-4">
              <div className="flex items-center gap-2 mb-3">
                <Sparkles className="w-4 h-4 text-primary" />
                <span className="text-sm font-semibold text-muted-foreground">–£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</span>
              </div>
              <div className="space-y-2">
                {suggestions.map((suggestion) => (
                  <button
                    key={suggestion.id}
                    onClick={() => selectSuggestion(suggestion)}
                    className="flex items-center gap-3 w-full p-2 rounded-lg hover:bg-muted transition-colors text-left"
                  >
                    <span className="text-lg">{suggestion.icon}</span>
                    <span className="flex-1">{suggestion.text}</span>
                    {suggestion.confidence && suggestion.confidence > 0.9 && (
                      <Badge variant="secondary" className="text-xs">–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</Badge>
                    )}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏ */}
          {query.length === 0 && recentSearches.length > 0 && (
            <div className="mb-4">
              <div className="flex items-center gap-2 mb-3">
                <Clock className="w-4 h-4 text-muted-foreground" />
                <span className="text-sm font-semibold text-muted-foreground">–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏</span>
              </div>
              <div className="flex flex-wrap gap-2">
                {recentSearches.map((search, index) => (
                  <Badge
                    key={index}
                    variant="outline"
                    className="cursor-pointer hover:bg-primary hover:text-primary-foreground transition-colors"
                    onClick={() => {
                      setQuery(search);
                      handleSearch(search);
                    }}
                  >
                    {search}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã */}
          {query.length === 0 && trendingQueries.length > 0 && (
            <div>
              <div className="flex items-center gap-2 mb-3">
                <TrendingUp className="w-4 h-4 text-primary" />
                <span className="text-sm font-semibold text-muted-foreground">–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Å–µ–π—á–∞—Å</span>
              </div>
              <div className="space-y-2">
                {trendingQueries.map((trend) => (
                  <button
                    key={trend.id}
                    onClick={() => selectSuggestion(trend)}
                    className="flex items-center gap-3 w-full p-2 rounded-lg hover:bg-muted transition-colors text-left"
                  >
                    <span className="text-lg">{trend.icon}</span>
                    <span className="flex-1">{trend.text}</span>
                    <Badge variant="secondary" className="text-xs">–ü–æ–ø—É–ª—è—Ä–Ω–æ</Badge>
                  </button>
                ))}
              </div>
            </div>
          )}
        </Card>
      )}
    </div>
  );
};

export default SmartSearch;