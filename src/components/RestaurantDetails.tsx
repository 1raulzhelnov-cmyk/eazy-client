import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { 
  Clock, MapPin, Phone, Star, Users, Utensils, 
  Wifi, CreditCard, Accessibility, Car, ShieldCheck,
  ThumbsUp, MessageCircle, Share2, Heart, Camera
} from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';

interface RestaurantDetailsProps {
  restaurantId: string;
}

interface RestaurantInfo {
  id: string;
  name: string;
  description: string;
  cuisine: string[];
  rating: number;
  reviewCount: number;
  priceRange: string;
  deliveryTime: string;
  deliveryFee: number;
  minimumOrder: number;
  address: string;
  phone: string;
  hours: {
    [day: string]: { open: string; close: string; closed?: boolean };
  };
  features: string[];
  images: string[];
  reviews: Review[];
  stats: {
    totalOrders: number;
    repeatCustomers: number;
    averageDeliveryTime: number;
    responsiveness: number;
  };
}

interface Review {
  id: string;
  user: string;
  rating: number;
  comment: string;
  date: string;
  orderItems: string[];
  helpful: number;
  images?: string[];
}

const mockRestaurant: RestaurantInfo = {
  id: '1',
  name: 'Piccola Italia',
  description: '–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ —Å–≤–µ–∂–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ –ò—Ç–∞–ª–∏–∏.',
  cuisine: ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è', '–ü–∏—Ü—Ü–∞', '–ü–∞—Å—Ç–∞'],
  rating: 4.7,
  reviewCount: 342,
  priceRange: '‚Ç¨‚Ç¨',
  deliveryTime: '25-35',
  deliveryFee: 2.50,
  minimumOrder: 15,
  address: '—É–ª. –ü—É—à–∫–∏–Ω–∞ 12, –ù–∞—Ä–≤–∞',
  phone: '+372 555-0123',
  hours: {
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': { open: '11:00', close: '22:00' },
    '–í—Ç–æ—Ä–Ω–∏–∫': { open: '11:00', close: '22:00' },
    '–°—Ä–µ–¥–∞': { open: '11:00', close: '22:00' },
    '–ß–µ—Ç–≤–µ—Ä–≥': { open: '11:00', close: '22:00' },
    '–ü—è—Ç–Ω–∏—Ü–∞': { open: '11:00', close: '23:00' },
    '–°—É–±–±–æ—Ç–∞': { open: '12:00', close: '23:00' },
    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': { open: '12:00', close: '21:00' }
  },
  features: [
    '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 25‚Ç¨',
    '–ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã',
    '–í–µ–≥–∞–Ω—Å–∫–∏–µ –æ–ø—Ü–∏–∏',
    '–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤—ã–µ –±–ª—é–¥–∞',
    'Wi-Fi –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤',
    '–ü–∞—Ä–∫–æ–≤–∫–∞'
  ],
  images: ['üçï', 'üçù', 'üßÑ', 'üç∑'],
  stats: {
    totalOrders: 2847,
    repeatCustomers: 78,
    averageDeliveryTime: 28,
    responsiveness: 95
  },
  reviews: [
    {
      id: '1',
      user: '–ê–Ω–Ω–∞ –ö.',
      rating: 5,
      comment: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –ø–∏—Ü—Ü–∞! –¢–µ—Å—Ç–æ —Ç–æ–Ω–∫–æ–µ, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å–≤–µ–∂–∏–µ. –î–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫, –≥–æ—Ä—è—á–µ–π.',
      date: '2024-09-10',
      orderItems: ['–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–¢–∏—Ä–∞–º–∏—Å—É'],
      helpful: 12,
      images: ['üì∏']
    },
    {
      id: '2',
      user: '–ú–∏—Ö–∞–∏–ª –ü.',
      rating: 4,
      comment: '–•–æ—Ä–æ—à–∞—è –ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞, –Ω–æ –º–æ–≥–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ –±–µ–∫–æ–Ω–∞. –í —Ü–µ–ª–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é.',
      date: '2024-09-08',
      orderItems: ['–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞', '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å'],
      helpful: 8
    },
    {
      id: '3',
      user: '–ï–ª–µ–Ω–∞ –î.',
      rating: 5,
      comment: '–ó–∞–∫–∞–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ. –í—Å–µ–≥–¥–∞ –≤–∫—É—Å–Ω–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ. –õ—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏!',
      date: '2024-09-05',
      orderItems: ['–õ–∞–∑–∞–Ω—å—è', '–ë—Ä—É—Å–∫–µ—Ç—Ç–∞'],
      helpful: 15
    }
  ]
};

export const RestaurantDetails = ({ restaurantId }: RestaurantDetailsProps) => {
  const [restaurant, setRestaurant] = useState<RestaurantInfo | null>(null);
  const [isLiked, setIsLiked] = useState(false);
  const [activeImageIndex, setActiveImageIndex] = useState(0);
  const { toast } = useToast();

  useEffect(() => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤
    setRestaurant(mockRestaurant);
  }, [restaurantId]);

  if (!restaurant) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  const getCurrentDayHours = () => {
    const today = new Date().toLocaleDateString('ru-RU', { weekday: 'long' });
    const todayCapitalized = today.charAt(0).toUpperCase() + today.slice(1);
    return restaurant.hours[todayCapitalized];
  };

  const isCurrentlyOpen = () => {
    const currentHours = getCurrentDayHours();
    if (!currentHours || currentHours.closed) return false;

    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    const [openHour, openMin] = currentHours.open.split(':').map(Number);
    const [closeHour, closeMin] = currentHours.close.split(':').map(Number);
    const openTime = openHour * 60 + openMin;
    const closeTime = closeHour * 60 + closeMin;

    return currentTime >= openTime && currentTime <= closeTime;
  };

  const getRatingDistribution = () => {
    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };
    restaurant.reviews.forEach(review => {
      distribution[review.rating as keyof typeof distribution]++;
    });
    
    const total = restaurant.reviews.length;
    return Object.entries(distribution).reverse().map(([rating, count]) => ({
      rating: Number(rating),
      count,
      percentage: total > 0 ? (count / total) * 100 : 0
    }));
  };

  const handleLike = () => {
    setIsLiked(!isLiked);
    toast({
      title: isLiked ? "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
      description: restaurant.name
    });
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: restaurant.name,
        text: restaurant.description,
        url: window.location.href
      });
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞",
        description: "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º —Å –¥—Ä—É–∑—å—è–º–∏"
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-start">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-2">
                <CardTitle className="text-2xl">{restaurant.name}</CardTitle>
                <Badge variant={isCurrentlyOpen() ? "default" : "secondary"}>
                  {isCurrentlyOpen() ? '–û—Ç–∫—Ä—ã—Ç–æ' : '–ó–∞–∫—Ä—ã—Ç–æ'}
                </Badge>
              </div>
              
              <div className="flex items-center gap-4 text-sm text-muted-foreground mb-3">
                <div className="flex items-center gap-1">
                  <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                  <span className="font-semibold">{restaurant.rating}</span>
                  <span>({restaurant.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)</span>
                </div>
                <span>‚Ä¢</span>
                <span>{restaurant.cuisine.join(', ')}</span>
                <span>‚Ä¢</span>
                <span>{restaurant.priceRange}</span>
              </div>
              
              <p className="text-muted-foreground mb-4">{restaurant.description}</p>
              
              <div className="flex items-center gap-4 text-sm">
                <div className="flex items-center gap-1">
                  <Clock className="w-4 h-4" />
                  <span>{restaurant.deliveryTime} –º–∏–Ω</span>
                </div>
                <div className="flex items-center gap-1">
                  <MapPin className="w-4 h-4" />
                  <span>–î–æ—Å—Ç–∞–≤–∫–∞ {restaurant.deliveryFee === 0 ? '–±–µ—Å–ø–ª–∞—Ç–Ω–æ' : `${restaurant.deliveryFee}‚Ç¨`}</span>
                </div>
                <div className="flex items-center gap-1">
                  <Utensils className="w-4 h-4" />
                  <span>–ú–∏–Ω. –∑–∞–∫–∞–∑ {restaurant.minimumOrder}‚Ç¨</span>
                </div>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={handleLike}>
                <Heart className={`w-4 h-4 ${isLiked ? 'fill-red-500 text-red-500' : ''}`} />
              </Button>
              <Button variant="outline" size="sm" onClick={handleShare}>
                <Share2 className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ç–∞–±–∞—Ö */}
      <Tabs defaultValue="info" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</TabsTrigger>
          <TabsTrigger value="hours">–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã</TabsTrigger>
          <TabsTrigger value="reviews">–û—Ç–∑—ã–≤—ã ({restaurant.reviewCount})</TabsTrigger>
          <TabsTrigger value="gallery">–ì–∞–ª–µ—Ä–µ—è</TabsTrigger>
        </TabsList>

        <TabsContent value="info">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-sm">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</span>
                  <span className="font-semibold">{restaurant.stats.totalOrders.toLocaleString()}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm">–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</span>
                  <span className="font-semibold">{restaurant.stats.repeatCustomers}%</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</span>
                  <span className="font-semibold">{restaurant.stats.averageDeliveryTime} –º–∏–Ω</span>
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-sm">–û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å</span>
                    <span className="font-semibold">{restaurant.stats.responsiveness}%</span>
                  </div>
                  <Progress value={restaurant.stats.responsiveness} className="h-2" />
                </div>
              </CardContent>
            </Card>

            {/* –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 gap-3">
                  {restaurant.features.map((feature, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <ShieldCheck className="w-4 h-4 text-green-500" />
                      <span className="text-sm">{feature}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–ö–æ–Ω—Ç–∞–∫—Ç—ã</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center gap-2">
                  <MapPin className="w-4 h-4 text-muted-foreground" />
                  <span className="text-sm">{restaurant.address}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Phone className="w-4 h-4 text-muted-foreground" />
                  <a href={`tel:${restaurant.phone}`} className="text-sm text-primary hover:underline">
                    {restaurant.phone}
                  </a>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="hours">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {Object.entries(restaurant.hours).map(([day, hours]) => (
                  <div key={day} className="flex justify-between items-center">
                    <span className="font-medium">{day}</span>
                    <span className={`text-sm ${hours.closed ? 'text-muted-foreground' : ''}`}>
                      {hours.closed ? '–ó–∞–∫—Ä—ã—Ç–æ' : `${hours.open} - ${hours.close}`}
                    </span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="reviews">
          <div className="space-y-6">
            {/* –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="text-center">
                    <div className="text-4xl font-bold text-primary mb-2">{restaurant.rating}</div>
                    <div className="flex items-center justify-center gap-1 mb-2">
                      {[1, 2, 3, 4, 5].map((star) => (
                        <Star
                          key={star}
                          className={`w-5 h-5 ${
                            star <= restaurant.rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'
                          }`}
                        />
                      ))}
                    </div>
                    <p className="text-sm text-muted-foreground">{restaurant.reviewCount} –æ—Ç–∑—ã–≤–æ–≤</p>
                  </div>
                  
                  <div className="space-y-2">
                    {getRatingDistribution().map((item) => (
                      <div key={item.rating} className="flex items-center gap-2">
                        <span className="text-sm w-3">{item.rating}</span>
                        <Star className="w-3 h-3 fill-yellow-400 text-yellow-400" />
                        <Progress value={item.percentage} className="flex-1 h-2" />
                        <span className="text-xs text-muted-foreground w-8">{item.count}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* –û—Ç–∑—ã–≤—ã */}
            <div className="space-y-4">
              {restaurant.reviews.map((review) => (
                <Card key={review.id}>
                  <CardContent className="pt-6">
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <span className="font-semibold">{review.user}</span>
                          <div className="flex items-center">
                            {[1, 2, 3, 4, 5].map((star) => (
                              <Star
                                key={star}
                                className={`w-3 h-3 ${
                                  star <= review.rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'
                                }`}
                              />
                            ))}
                          </div>
                        </div>
                        <p className="text-xs text-muted-foreground">{review.date}</p>
                      </div>
                      {review.images && (
                        <Badge variant="outline" className="text-xs">
                          <Camera className="w-3 h-3 mr-1" />
                          –§–æ—Ç–æ
                        </Badge>
                      )}
                    </div>
                    
                    <p className="text-sm mb-3">{review.comment}</p>
                    
                    <div className="flex items-center justify-between text-xs text-muted-foreground">
                      <span>–ó–∞–∫–∞–∑–∞–ª: {review.orderItems.join(', ')}</span>
                      <div className="flex items-center gap-4">
                        <button className="flex items-center gap-1 hover:text-foreground">
                          <ThumbsUp className="w-3 h-3" />
                          {review.helpful}
                        </button>
                        <button className="flex items-center gap-1 hover:text-foreground">
                          <MessageCircle className="w-3 h-3" />
                          –û—Ç–≤–µ—Ç–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="gallery">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ì–∞–ª–µ—Ä–µ—è</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {restaurant.images.map((image, index) => (
                  <div
                    key={index}
                    className="aspect-square bg-gradient-to-br from-pink-50 to-purple-50 dark:from-pink-950 dark:to-purple-950 rounded-lg flex items-center justify-center text-4xl cursor-pointer hover:scale-105 transition-transform"
                    onClick={() => setActiveImageIndex(index)}
                  >
                    {image}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default RestaurantDetails;